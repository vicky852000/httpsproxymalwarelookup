import sys

filename = 'urls.txt'

def callServiceLayer():
    pass


def getMemorySize():
    '''
    This method will return the memory which is available in the system.
    we are doing this as our url list can grow in size beyond the system memory available.

    Ideally this should use psutil library which have to be installed, however here I am assuming only 1 mb space is available to load the data from file
    '''
    available_memory = 1 # psutil.virtual_memory(), Assuming worst case. only 1 MB is available to load
    can_use_memory = available_memory*1024
    print("system memory we can use is {0}".format(can_use_memory))
    return can_use_memory #converting it to bytes

def openFileAndLoadUrls():
    '''
    This method will check the available system memory and load appropriate urls only in memory to avoid crash due to OutOfMemoryException
    Here
        1. fetch available memory from system
        2. then start loading the urls till they are less than current available memory. Here for safer side I am storing 200 bytes less. We can still enhance this
        3. Once the load is done means near to the available memory limit then call service layer api's to check whether thet are malware sites.
        4. Check for url list is also required as you may still have some memory but all the Url's are done. In that case we case to accomodate that much Urls and call
            service layer.
    '''
    available_memory = getMemorySize()
    lines = []
    f_open = open(filename,'r')
    avl_memory = available_memory
    while True:
        line = f_open.readline()
        line_size = sys.getsizeof(line)
        avl_memory -= line_size

        #Each url size is approximatly 128bytes so on safer side comparing it with 200, we have to handle it based on next line
        if avl_memory < 200 or not line:
            #we have loaded limited urls in the list, loading beyond that may crash the system.
            callServiceLayer()

            # Reseting temorary memory variable
            avl_memory = available_memory

            print(lines)
            print("\n\n")
            #Reseting the list which contains the processed urls
            lines = []

            #may be there is still some space in the memory but we are done with the urls. So we are done breaking the loop
            if not line:
                break

        #adding next line in the processing list.
        lines.append(line)

if __name__ == "__main__":
    openFileAndLoadUrls()
