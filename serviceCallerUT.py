import unittest
import urllib.request

import constants
from logger import CallerLogs
from serviceCaller import *
logger = CallerLogs.createServiceUTLogger()


#Dictionaries for comparing after UT execution.
dct_output = {'urls': [{'url_link': 'http://127.0.0.1:5000/urlinfo/100/10.10.1.35:10535/one/two?id=44&name=ankur', 'is_malware': 'True', 'error': False, 'url_id': 100}, {'url_link': 'http://127.0.0.1:5000/urlinfo/101/10.10.1.36:10536/one/two?id=44&name=ank2', 'is_malware': 'False', 'error': False, 'url_id': 101}, {'url_link': 'http://127.0.0.1:5000/urlinfo/102/10.10.1.37:10537/one/two?id=44&name=ank3', 'is_malware': 'False', 'error': False, 'url_id': 102}, {'url_link': 'http://127.0.0.1:5000/urlinfo/103/10.10.1.38:10538/one/two?id=44&name=ank4', 'is_malware': 'False', 'error': False, 'url_id': 103}, {'url_link': 'http://127.0.0.1:5000/urlinfo/101/10.10.1.36:10536/one/three?id=46&name=saurabh', 'is_malware': 'True', 'error': False, 'url_id': 101}, {'url_link': 'http://127.0.0.1:5000/urlinfo/102/10.10.1.37:10537/two/three?id=14&name=munni', 'is_malware': 'True', 'error': False, 'url_id': 102}, {'url_link': 'http://127.0.0.1:5000/urlinfo/103/10.10.1.38:10538/one/four?id=56&name=punit', 'is_malware': 'True', 'error': False, 'url_id': 103}, {'desc': 'Invalid url ankur/...', 'url_link': 'http://127.0.0.1:5000/ankur/', 'error': True}]}

dct_all_malware = {'records': [[100, '10.10.1.35', 10535, 'one/two', 'id=44&name=ankur'], [101, '10.10.1.36', 10536, 'one/three', 'id=46&name=saurabh'], [102, '10.10.1.37', 10537, 'two/three', 'id=14&name=munni'], [103, '10.10.1.38', 10538, 'one/four', 'id=56&name=punit'], [104, '10.10.1.39', 10539, 'three/four', 'id=45&name=seena']]}

dct_fake_url = {'error': 'Invalid url some/fake/url/...'}



class ServiceCaller(unittest.TestCase):
    def test_first(self):
        logger.info("running first test")
        mem = getMemorySize()
        self.assertEqual(mem, 1024)
        logger.info("test completed successfully")

    def test_second(self):
        logger.info("running second test")
        FILENAME = 'test_urls.txt'
        dct = {}
        dct['urls'] = []
        openFileAndLoadUrls(constants.TEST_FILENAME, dct)
        self.assertEqual(dct,dct_output)
        logger.info("test completed successfully")

    def test_third(self):
        logger.info("running third test")
        url = "http://127.0.0.1:5000/all/malwares/"
        resp = urllib.request.urlopen(url)
        all_malware_info = eval(resp.read())
        self.assertEqual(all_malware_info, dct_all_malware)
        logger.info("test completed successfully")

    def test_fourth(self):
        logger.info("running fourth test")
        url = "http://127.0.0.1:5000/some/fake/url/"
        resp = urllib.request.urlopen(url)
        fake_url = eval(resp.read())
        self.assertEqual(fake_url, dct_fake_url)
        logger.info("test completed successfully")

    def test_fifth(self):
        logger.info("running fifth test")
        url = "http://127.0.0.1:5000/urlinfo/101/10.10.1.36:10536/one/three?id=46&name=saurabh"
        resp = urllib.request.urlopen(url)
        url_info = eval(resp.read())
        self.assertEqual(url_info.get("is_malware"), "True")
        logger.info("test completed successfully")

    def test_sixth(self):
        logger.info("running sixth test")
        url = "http://127.0.0.1:5000/urlinfo/101/10.10.1.36:10536/one/three?id=46&name=ankur"
        resp = urllib.request.urlopen(url)
        url_info = eval(resp.read())
        self.assertEqual(url_info.get("is_malware"), "False")
        logger.info("test completed successfully")


if __name__== "__main__":
    unittest.main()

