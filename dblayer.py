import sqlite3
from logger import CallerLogs
logger = CallerLogs.createDBLogger()

MALWARE_DATABASE = "malware.db"

class DBConnectionError(Exception):
    def __init__(self,msg):
        self.msg = msg
        Exception.__init__(self,msg)
    def getMessage(self):
        return self.msg


class DBLayer:
    '''
    DBLayer is the abstract layer between the business logic(service layer) and malware database.
    Its a singleton class which will give you a single instance for all the operations.
    '''
    class __DBConnection:
        def __init__(self):
            try:
                logger.info("creating malware db connections")
                self.connect = sqlite3.connect(MALWARE_DATABASE)
                if self.connect is None:
                    logger.error("some issue in creating db connection")
                    raise DBConnectionError("Unable to create DB connection")
            except DBConnectionError as e:
                logger.error(e.getMessage())
            except Exception as e:
                logger.error("couldn't create db connection due to {} "+str(e))

        def fetch_blacklist_urls(self):
            logger.info("received a request for fetcging all the black listed urls")
            select_sql = "select * from malware"
            records = self.connect.execute(select_sql)
            data = list(records)
            logger.info("fetched malware records {}".format(data))
            return data

        def store_blacklist_url(self,url_id,host,port,url_path,qstring):
            insert_sql = "INSERT INTO MALWARE (URL_ID, HOST,PORT,PATH,QSTRING) VALUES({0},{1},{2},{3},{4})".format(url_id,host,port,url_path,qstring)
            self.connect.execute(insert_sql)
            logger.info("successfully inserted new black list url")

    __instance = None

    @classmethod
    def getInstance(cls):
        if DBLayer.__instance is None:
            DBLayer.__instance = DBLayer.__DBConnection()
        return DBLayer.__instance

