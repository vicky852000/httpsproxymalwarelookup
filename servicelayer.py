from flask import Flask
from flask import jsonify
from dblayer import DBLayer
from flask import request
from logger import CallerLogs
logger = CallerLogs.createServiceLogger()

app = Flask(__name__)
records = None

@app.route('/all/malwares/', methods=['GET'])
def getAllBlackListUrls():
    logger.info("received a request for all malwares")
    s1 = DBLayer.getInstance()
    records = s1.fetch_blacklist_urls()
    return jsonify({'records': list(records)})


def checkWhetherMalwareURL(url_id, host, port, url_path, qstring):
    logger.info("checking malware for {0}, {1}, {2}, {3}. {4} ".format(url_id, host, port, url_path, qstring))
    db_conn = DBLayer.getInstance()
    global records
    if not records:
        logger.info("fetching records from database")
        records = db_conn.fetch_blacklist_urls()
    else:
        logger.info("Records are already cached")
    for record in records:
        if url_id == record[0]:
            if host == record[1]:
                if port == record[2]:
                    if url_path == record[3]:
                        if qstring.decode("utf-8") == record[4]:
                            logger.info("Contains malware returning True")
                            return "True"
    logger.info("Doesn't Contains malware returning False")
    return "False"


@app.route('/urlinfo/<int:url_id>/<host_port>/<path:url_path>', methods=['GET'])
def isMalwareUrl(url_id, host_port, url_path):
    logger.info("received a request for malware check")
    (host, port) = host_port.split(":")
    port = int(port)
    if url_id is None or host is None or port is None or url_path is None:
        logger.error("seems like its missing some data -- invalid url")
        return jsonify({'error': 'incomplete or invalid url...'})

    # port range check
    if not (0 <= port and port <= 65535):
        logger.info("seems like port range is not proper {}".format(port))
        return jsonify({'error': 'invalid port range...'})

    is_malware = checkWhetherMalwareURL(url_id, host, port, url_path, request.query_string)
    url_info = {
        'url_id': url_id,
        'is_malware': is_malware
    }
    logger.info("returning {} ".format(url_info))
    return jsonify(url_info)


@app.route('/', defaults={'path': ''})
@app.route('/<path:path>')
def catch_all(path):
    logger.error("received request for invalid path {}".format(path))
    msg = 'Invalid url %s...' % path
    return jsonify({'error': msg})


if __name__ == "__main__":
    logger.info("service layer started successfully")
    app.run()
    logger.info("service layer exited successfully")